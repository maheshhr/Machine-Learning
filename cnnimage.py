# -*- coding: utf-8 -*-
"""CNNimage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZxZ9FfUQmBNswAnup-BaEqxQTOvPJ5qW
"""

from PIL import Image 
import os  
from random import shuffle
from tqdm import tqdm
import matplotlib.pyplot as plt
import numpy as np

IMG_SIZE = 120
LR = 1e-3
model_name = '2conv-basic'

MODEL_NAME = f'NIKEvsADIDAS--{LR}-{model_name}.model'

TRAIN_DIR = "/content/drive/MyDrive/CNN Classification/TRAIN"
TEST_DIR =  "/content/drive/MyDrive/CNN Classification/TEST"

def label_img(img): 
    word_label = img.split('_')[0]
    print(word_label)
    if word_label == 'NIKE': return [1,0] 
    elif word_label == 'ADIDAS': return [0,1]

label_img("ADIDAS_1.png")

os.path.join(TRAIN_DIR,'ADIDAS_1.png')

sample_dir = '/content/drive/MyDrive/CNN Classification/sample'

def create_train_data():
    train_data = []
    for img in tqdm(os.listdir(TRAIN_DIR)):
        label = label_img(img) 
        path = os.path.join(TRAIN_DIR, img)

        
        img = Image.open(path) 
        img = img.convert('L') 
        img = img.resize((IMG_SIZE, IMG_SIZE), Image.ANTIALIAS) 
        
        train_data.append([np.array(img), np.array(label)])
    shuffle(train_data)
    np.save('train_data.npy', train_data) 
    return train_data

out = create_train_data()

import matplotlib.pyplot as plt
img = out[22][0]
print(out[22][1])
plt.imshow(img,cmap = 'gist_gray')

def process_test_data():
    test_data = []
    for img in tqdm(os.listdir(TEST_DIR)):
        path = os.path.join(TEST_DIR, img)
        img_num = img.split('_')[1] 
        print(img_num)
        img = Image.open(path)
        img = img.convert('L')
        img = img.resize((IMG_SIZE, IMG_SIZE), Image.ANTIALIAS)
        
        test_data.append([np.array(img), img_num])
    shuffle(test_data)
    np.save('test_data.npy', test_data)
    return test_data

train_data = create_train_data()
plt.imshow(train_data[43][0], cmap = 'gist_gray')
print(train_data[43][1])

plt.imshow(train_data[3][0], cmap = 'gist_gray')
print(train_data[3][1])

input_shape = (120, 120, 1)

nClasses = 2

def createModel():
    model = Sequential()
    model.add(Conv2D(32, (5, 5), padding='same', activation='relu', input_shape=input_shape))
    model.add(Conv2D(32, (5, 5), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
 

    model.add(Conv2D(64, (5, 5), padding='same', activation='relu'))
    model.add(Conv2D(64, (5, 5), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))


    model.add(Conv2D(64, (5, 5), padding='same', activation='relu'))
    model.add(Conv2D(64, (5, 5), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))


    model.add(Flatten())
    model.add(Dense(512, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(nClasses, activation='softmax'))
    return model

train = train_data[-90:] 
test = train_data[:-90]

test_val = np.arange(16).reshape(1,4,4)

test_val

res = test_val.reshape(-1,4,4,1)

res

X = np.array([i[0] for i in train]).reshape(-1, IMG_SIZE, IMG_SIZE, 1)
Y = np.array([i[1] for i in train])

test_x = np.array([i[0] for i in test]).reshape(-1, IMG_SIZE, IMG_SIZE, 1)
test_y = np.array([i[1] for i in test])

X[0]

new_check = np.array([train[0][0]]).reshape(-1, IMG_SIZE, IMG_SIZE, 1)

new_check.shape

test_y

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from __future__ import print_function
import keras
from keras.models import Sequential
from tensorflow.keras.utils import to_categorical
from keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten

model = createModel()

batch_size = 256
epochs = 100
model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

len(X)
len(Y)

len(test_x)
len(test_y)

model.fit(x = X,y=Y, batch_size=batch_size, epochs=epochs, verbose=1, 
                   validation_data=(test_x, test_y))

model.summary()

def process_test():
    test_data = []
    for img in tqdm(os.listdir(TEST_DIR)):
        path = os.path.join(TEST_DIR, img)
        if "DS_Store" not in path:
            img_num = img.split('_')[1] 
            print(img_num)
            img = Image.open(path)
            img = img.convert('L')
            img = img.resize((IMG_SIZE, IMG_SIZE), Image.ANTIALIAS)
            test_data.append([np.array(img), img_num])
        break
    shuffle(test_data)
    np.save('test_data.npy', test_data)
    return test_data

test_img = process_test_data()[0];

test_img

test_img = test_img[0].reshape(IMG_SIZE, IMG_SIZE, 1)

test_img

model.predict(np.array([test_img]))

np.argmax(model.predict(np.array([test_img])))

test_data = process_test_data()
fig = plt.figure()
for num, data in enumerate(test_data[:10]):
    img_num = data[1]
    img_data = data[0]
    
    y = fig.add_subplot(3,4,num+1)
    orig = img_data
    data = img_data.reshape(IMG_SIZE, IMG_SIZE, 1)
    
    model_out = model.predict(np.array([data]))[0]
    print(model_out)
    if np.argmax(model_out) == 1:
        str_label = 'ADIDAS'
    else:
        str_label = 'NIKE'
    
    y.imshow(orig, cmap = 'gray')
    plt.title(str_label)
plt.show()

